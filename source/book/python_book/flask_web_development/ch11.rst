第十一章：博客文章
====================================

在本章,我们要实现 Flasky 的主要功能,即允许用户阅读、撰写博客文章。本章你会学到 一些新技术:重用模板、分页显示长列表以及处理富文本。

提交和显示博客文章
------------------------------------------------------------------

为支持博客文章,我们需要创建一个新的数据库模型

app/models.py:文章模型::

    class Post(db.Model):
        __tablename__ = 'posts'
        id = db.Column(db.Integer, primary_key=True)
        body = db.Column(db.Text)
        timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)
        author_id = db.Column(db.Integer, db.ForeignKey('users.id'))

    class User(UserMixin, db.Model):
        # ...
        posts = db.relationship('Post', backref='author', lazy='dynamic')

博客文章包含正文、时间戳以及和 User 模型之间的一对多关系。body 字段的定义类型是
db.Text,所以不限制长度。

在程序的首页要显示一个表单,以便让用户写博客。这个表单很简单,只包括一个多行文本
输入框,用于输入博客文章的内容,另外还有一个提交按钮,

app/main/forms.py:博客文章表单::

    class PostForm(Form):
        body = TextAreaField("What's on your mind?", validators=[Required()])
        submit = SubmitField('Submit')

index() 视图函数处理这个表单并把以前发布的博客文章列表传给模板

app/main/views.py:处理博客文章的首页路由::

    @main.route('/', methods=['GET', 'POST'])
    def index():
        form = PostForm()
        if current_user.can(Permission.WRITE_ARTICLES) and \
                form.validate_on_submit():
            post = Post(body=form.body.data,
                    author=current_user._get_current_object())
            db.session.add(post)
            return redirect(url_for('.index'))

        posts = Post.query.order_by(Post.timestamp.desc()).all()
        return render_template('index.html', form=form, posts=posts)

这个视图函数把表单和完整的博客文章列表传给模板。文章列表按照时间戳进行降序排 列。博客文章表单采取惯常处理方式,如果提交的数据能通过验证就创建一个新 Post 实 例。在发布新文章之前,要检查当前用户是否有写文章的权限。

注意,新文章对象的 author 属性值为表达式 current_user._get_current_object()。变量 current_user 由 Flask-Login 提供,和所有上下文变量一样,也是通过线程内的代理对象实 现。这个对象的表现类似用户对象,但实际上却是一个轻度包装,包含真正的用户对象。 数据库需要真正的用户对象,因此要调用 _get_current_object() 方法。

这个表单显示在 index.html 模板中欢迎消息的下方,其后是博客文章列表。在这个博客文 章列表中,我们首次尝试创建博客文章时间轴,按照时间顺序由新到旧列出了数据库中所 有的博客文章。

app/templates/index.html:显示博客文章的首页模板::

 .. literalinclude:: code/code11-1.html
    :language: html

注意,如果用户所属角色没有 WRITE_ARTICLES 权限,则经 User.can() 方法检查后,不会显 示博客文章表单。博客文章列表通过 HTML 无序列表实现,并指定了一个 CSS 类,从而 让格式更精美。页面左侧会显示作者的小头像,头像和作者用户名都渲染成链接形式,可 链接到用户资料页面。所用的 CSS 样式都存储在程序 static 文件夹里的 style.css 文件中。 你可到 GitHub 仓库中查看这个文件。

在资料页中显示博客文章
------------------------------------------------------------------

我们可以将用户资料页改进一下,在上面显示该用户发布的博客文章列表。

app/main/views.py:获取博客文章的资料页路由::

    @main.route('/user/<username>')
    def user(username):
        user = User.query.filter_by(username=username).first()
        if user is None:
            abort(404)
        posts = user.posts.order_by(Post.timestamp.desc()).all()
        return render_template('user.html', user=user, posts=posts)

用户发布的博客文章列表通过 User.posts 关系获取,User.posts 返回的是查询对象,因此 可在其上调用过滤器,例如 order_by()。

和index.html模板一样,user.html模板也要使用一个HTML <ul>元素渲染博客文章。维护 两个完全相同的 HTML 片段副本可不是个好主意,遇到这种情况,Jinja2 提供的 include() 指令就非常有用。user.html 模板包含了其他文件中定义的列表,

app/templates/user.html:显示有博客文章的资料页模板::

    ...
    <h3>Posts by {{ user.username }}</h3> 
    {% include '_posts.html' %}
    ...

为了完成这种新的模板组织方式,index.html 模板中的 <ul> 元素需要移到新模板 _posts. html 中,并替换成另一个 include() 指令。注意,_posts.html 模板名的下划线前缀不是必 须使用的,这只是一种习惯用法,以区分独立模板和局部模板。

分页显示长博客文章列表
------------------------------------------------------------------

随着网站的发展,博客文章的数量会不断增多,如果要在首页和资料页显示全部文章,浏 览速度会变慢且不符合实际需求。在 Web 浏览器中,内容多的网页需要花费更多的时间生 成、下载和渲染,所以网页内容变多会降低用户体验的质量。这一问题的解决方法是分页 显示数据,进行片段式渲染。


创建虚拟博客文章数据
------------------------------------------------------------------

**不能生成中文数据？**
若想实现博客文章分页,我们需要一个包含大量数据的测试数据库。手动添加数据库记录 浪费时间而且很麻烦,所以最好能使用自动化方案。有多个 Python 包可用于生成虚拟信 息,其中功能相对完善的是 ForgeryPy,可以使用 pip 进行安装:

::
    
    (venv) $ pip install forgerypy

严格来说,ForgeryPy 并不是这个程序的依赖,因为它只在开发过程中使用。为了区分生 产环境的依赖和开发环境的依赖,我们可以把文件 requirements.txt 换成 requirements 文件 夹,它们分别保存不同环境中的依赖。在这个新建的文件夹中,我们可以创建一个 dev.txt 文件,列出开发过程中所需的依赖,再创建一个 prod.txt 文件,列出生产环境所需的依赖。 由于两个环境所需的依赖大部分是相同的,因此可以创建一个 common.txt 文件,在 dev.txt 和 prod.txt 中使用 -r 参数导入。

 requirements/dev.txt:开发所需的依赖文件::

    -r common.txt
    ForgeryPy==0.1

app/models.py:生成虚拟用户和博客文章

 .. literalinclude:: code/code11-2.py
    :language: python

这些虚拟对象的属性由 ForgeryPy 的随机信息生成器生成,其中的名字、电子邮件地址、 句子等属性看起来就像真的一样。

用户的电子邮件地址和用户名必须是唯一的,但 ForgeryPy 随机生成这些信息,因 此有重复的风险。如果发生了这种不太可能出现的情况,提交数据库会话时会抛出 IntegrityError 异常。这个异常的处理方式是,在继续操作之前回滚会话。在循环中生成 重复内容时不会把用户写入数据库,因此生成的虚拟用户总数可能会比预期少。

随机生成文章时要为每篇文章随机指定一个用户。为此,我们使用 offset() 查询过滤器。 这个过滤器会跳过参数中指定的记录数量。通过设定一个随机的偏移值,再调用 first() 方法,就能每次都获得一个不同的随机用户。

使用新添加的方法,我们可以在 Python shell 中轻易生成大量虚拟用户和文章::

    (venv) $ python manage.py shell
    >>> User.generate_fake(100)
    >>> Post.generate_fake(100)

在页面中渲染数据
------------------------------------------------------------------

app/main/views.py:分页显示博客文章列表::

    @main.route('/', methods=['GET', 'POST'])
    def index():
        #...
        page = request.args.get('page', 1, type=int)
        pagination = Post.query.order_by(
            Post.timestamp.desc()).paginate(
                page, per_page=current_app.config['FLASKY_POSTS_PER_PAGE'],error_out=False)

        posts = pagination.items
        return render_template('index.html', form=form,posts=posts,
            pagination=pagination)

渲染的页数从请求的查询字符串(request.args)中获取,如果没有明确指定,则默认渲
染第一页。参数 type=int 保证参数无法转换成整数时,返回默认值。

为了显示某页中的记录,要把 all() 换成 Flask-SQLAlchemy 提供的 paginate() 方法。页 数是 paginate() 方法的第一个参数,也是唯一必需的参数。可选参数 per_page 用来指定 每页显示的记录数量;如果没有指定,则默认显示 20 个记录。另一个可选参数为 error_out,当其设为 True 时(默认值),如果请求的页数超出了范围,则会返回 404 错误;如果 设为 False,页数超出范围时会返回一个空列表。为了能够很便利地配置每页显示的记录 数量,参数 per_page 的值从程序的环境变量 FLASKY_POSTS_PER_PAGE 中读取。

这样修改之后,首页中的文章列表只会显示有限数量的文章。若想查看第 2 页中的文章, 要在浏览器地址栏中的 URL 后加上查询字符串 ?page=2。

添加分页导航
------------------------------------------------------------------

paginate() 方法的返回值是一个 Pagination 类对象,这个类在 Flask-SQLAlchemy 中定义。 这个对象包含很多属性,用于在模板中生成分页链接,因此将其作为参数传入了模板。

Flask-SQLAlchemy分页对象的属性：
 - items 当前页面中的记录
 - query 分页的源查询
 - page 当前页数
 - prev_num 上一页的页数
 - next_num 下一页的页数
 - has_next 如果有下一页,返回 True 
 - has_prev 如果有上一页,返回 True 
 - pages 查询得到的总页数 
 - per_page 每页显示的记录数量 
 - total 查询返回的记录总数

在Flask-SQLAlchemy对象上可调用的方法：

 -iter_pages(left_edge=2,left_current=2,right_current=5,right_edge=2) :一个迭代器,返回一个在分页导航中显示的页数列表。这个列表的最左边显示left_edge页,当前页的左边显示 left_current页,当前页的右边显示right_current页 最右边显示right_edge页。例如,在一个100页的列表中,当前页为第50页,使用,默认配置,这个方法会返回以下页数:1、2、None、48、49、50、51、52、53、54、55、None、99、100。None 表示页数之间的间隔
 - prev() 上一页的分页对象
 - next() 下一页的分页对象


拥有这么强大的对象和 Bootstrap 中的分页 CSS 类,我们很轻易地就能在模板底部构建一 个分页导航。

app/templates/_macros.html:分页模板宏

此处用html代码 但是代码加入错误了当时。略过


这个宏创建了一个 Bootstrap 分页元素,即一个有特殊样式的无序列表,其中定义了下述页面链接:
 - “上一页”链接。如果当前页是第一页,则为这个链接加上 disabled 类。
 - 分页对象的iter_pages()迭代器返回的所有页面链接。这些页面被渲染成具有明确页数的链接,页数在 url_for() 的参数中指定。当前显示的页面使用 activeCSS 类高亮显 示。页数列表中的间隔使用省略号表示。
 - “下一页”链接。如果当前页是最后一页,则会禁用这个链接。


Jinja2 宏的参数列表中不用加入\**kwargs 即可接收关键字参数。分页宏把接收到的所有关 键字参数都传给了生成分页链接的 url_for() 方法。这种方式也可在路由中使用,例如包 含一个动态部分的资料页。

pagination_widget 宏可放在 index.html 和 user.html 中的 _posts.html 模板后面。

app/templates/index.html:在博客文章列表下面添加分页导航::

    {% extends "base.html" %}
    {% import "bootstrap/wtf.html" as wtf %} 
    {% import "_macros.html" as macros %} 

    {% include '_posts.html' %}
    <div class="pagination">
    {{ macros.pagination_widget(pagination, '.index') }}
    </div>
    {% endif %}

使用Markdown和Flask-PageDown支持富 文本文章
------------------------------------------------------------------

**这个略过 ，使用flask-ueditor比这个pagedown好用，
到时候在另外做一篇文章再讲解**



.. include:: ../../../ad.rst   


